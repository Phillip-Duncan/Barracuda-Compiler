use std::io::{Error, ErrorKind};
use num_derive::FromPrimitive;
use num_traits::FromPrimitive;
use num_derive::ToPrimitive;
use num_traits::ToPrimitive;
use strum_macros::EnumString;
use safer_ffi::prelude::*;


/// BarracudaOperators is a enum of all the operations of the Barracuda VM.
/// Each enum is set to the associated opcode.
/// In general the operations will pop arguments of the computation stack in order of last_arg to
/// first_arg while popping and will push the result of the operation to the stack. This may not
/// be true for more complex functions such as MALLOC which will interact with the memory heap.
/// Refer to the opcode documentation for more information.
#[allow(dead_code)]
#[allow(non_camel_case_types)]
#[derive(Debug, Eq, PartialEq, Copy, Clone, FromPrimitive, ToPrimitive, EnumString)]
#[repr(u32)]
pub enum BarracudaOperators {
    NULL       = 0x0000 , 
    ADD        = 0x03CC , 
    SUB        = 0x03CD , 
    MUL        = 0x03CE , 
    DIV        = 0x03CF , 
    AND        = 0x03D0 , 
    NAND       = 0x03D1 , 
    OR         = 0x03D2 , 
    NOR        = 0x03D3 , 
    XOR        = 0x03D4 , 
    NOT        = 0x03D5 , 
    INC        = 0x03D6 , 
    DEC        = 0x03D7 , 
    SWAP       = 0x03D8 , 
    DUP        = 0x03D9 , 
    OVER       = 0x03DA , 
    DROP       = 0x03DB , 
    LSHIFT     = 0x03DC , 
    RSHIFT     = 0x03DD , 
    MALLOC     = 0x03DE , 
    FREE       = 0x03DF , 
    MEMCPY     = 0x03E0 , 
    MEMSET     = 0x03E1 , 
    READ       = 0x03E2 , 
    WRITE      = 0x03E3 , 
    ADD_PTR    = 0x03E4 , 
    SUB_PTR    = 0x03E5 , 
    TERNARY    = 0x03E6 ,
    // READ_U8 -> u64
    // READ_F8 -> f64

    // Added for support of the compiler
    EQ         = 0x03E7,
    GT         = 0x03E8,
    GTEQ       = 0x03E9,
    LT         = 0x03EA,
    LTEQ       = 0x03EB,
    STK_READ   = 0x03EC,
    STK_WRITE  = 0x03ED,


    ACOS       = 0x0798 , 
    ACOSH      = 0x0799 , 
    ASIN       = 0x079A , 
    ASINH      = 0x079B , 
    ATAN       = 0x079C , 
    ATAN2      = 0x079D , 
    ATANH      = 0x079E , 
    CBRT       = 0x079F , 
    CEIL       = 0x07A0 ,
    CPYSGN     = 0x07A1 , 
    COS        = 0x07A2 , 
    COSH       = 0x07A3 , 
    COSPI      = 0x07A4 , 
    BESI0      = 0x07A5 , 
    BESI1      = 0x07A6 , 
    ERF        = 0x07A7 , 
    ERFC       = 0x07A8 , 
    ERFCI      = 0x07A9 , 
    ERFCX      = 0x07AA , 
    ERFI       = 0x07AB , 
    EXP        = 0x07AC , 
    EXP10      = 0x07AD , 
    EXP2       = 0x07AE , 
    EXPM1      = 0x07AF , 
    FABS       = 0x07B0 , 
    FDIM       = 0x07B1 , 
    FLOOR      = 0x07B2 , 
    FMA        = 0x07B3 , 
    FMAX       = 0x07B4 , 
    FMIN       = 0x07B5 , 
    FMOD       = 0x07B6 , 
    FREXP      = 0x07B7 , 
    HYPOT      = 0x07B8 , 
    ILOGB      = 0x07B9 , 
    ISFIN      = 0x07BA , 
    ISINF      = 0x07BB , 
    ISNAN      = 0x07BC , 
    BESJ0      = 0x07BD , 
    BESJ1      = 0x07BE , 
    BESJN      = 0x07BF , 
    LDEXP      = 0x07C0 , 
    LGAMMA     = 0x07C1 , 
    LLRINT     = 0x07C2 , 
    LLROUND    = 0x07C3 , 
    LOG        = 0x07C4 , 
    LOG10      = 0x07C5 , 
    LOG1P      = 0x07C6 , 
    LOG2       = 0x07C7 , 
    LOGB       = 0x07C8 , 
    LRINT      = 0x07C9 , 
    LROUND     = 0x07CA , 
    MAX        = 0x07CB , 
    MIN        = 0x07CC , 
    MODF       = 0x07CD , 
    NAN        = 0x07CE , 
    NEARINT    = 0x07CF , 
    NXTAFT     = 0x07D0 , 
    NORM       = 0x07D1 , 
    NORM3D     = 0x07D2 , 
    NORM4D     = 0x07D3 , 
    NORMCDF    = 0x07D4 , 
    NORMCDFINV = 0x07D5 , 
    POW        = 0x07D6 , 
    RCBRT      = 0x07D7 , 
    REM        = 0x07D8 , 
    REMQUO     = 0x07D9 , 
    RHYPOT     = 0x07DA , 
    RINT       = 0x07DB , 
    RNORM      = 0x07DC , 
    RNORM3D    = 0x07DD , 
    RNORM4D    = 0x07DE , 
    ROUND      = 0x07DF , 
    RSQRT      = 0x07E0 , 
    SCALBLN    = 0x07E1 , 
    SCALBN     = 0x07E2 , 
    SGNBIT     = 0x07E3 , 
    SIN        = 0x07E4 , 
    SINH       = 0x07E5 , 
    SINPI      = 0x07E6 , 
    SQRT       = 0x07E7 , 
    TAN        = 0x07E8 , 
    TANH       = 0x07E9 , 
    TGAMMA     = 0x07EA , 
    TRUNC      = 0x07EB , 
    BESY0      = 0x07EC , 
    BESY1      = 0x07ED , 
    BESYN      = 0x07EE ,

    PRINTC     = 0x0B64 , 
    PRINTCT    = 0x0B65 , 
    PRINTFF    = 0x0B66 , 
    PRINTFFT   = 0x0B67 ,

    LDA        = 0x12FC , 
    LDB        = 0x12FD , 
    LDC        = 0x12FE , 
    LDD        = 0x12FF , 
    LDE        = 0x1300 , 
    LDF        = 0x1301 , 
    LDG        = 0x1302 , 
    LDH        = 0x1303 , 
    LDI        = 0x1304 , 
    LDJ        = 0x1305 , 
    LDK        = 0x1306 , 
    LDL        = 0x1307 , 
    LDM        = 0x1308 , 
    LDN        = 0x1309 , 
    LDO        = 0x130A , 
    LDP        = 0x130B , 
    LDQ        = 0x130C , 
    LDR        = 0x130D , 
    LDS        = 0x130E , 
    LDT        = 0x130F , 
    LDU        = 0x1310 , 
    LDV        = 0x1311 , 
    LDW        = 0x1312 , 
    LDX        = 0x1313 , 
    LDY        = 0x1314 , 
    LDZ        = 0x1315 , 
    LDDX       = 0x1316 , 
    LDDY       = 0x1317 , 
    LDDZ       = 0x1318 , 
    LDDT       = 0x1319 , 
    LDA0       = 0x131A , 
    LDB0       = 0x131B , 
    LDC0       = 0x131C , 
    LDD0       = 0x131D , 
    LDE0       = 0x131E , 
    LDF0       = 0x131F , 
    LDG0       = 0x1320 , 
    LDH0       = 0x1321 , 
    LDI0       = 0x1322 , 
    LDJ0       = 0x1323 ,
    LDK0       = 0x1324 , 
    LDL0       = 0x1325 , 
    LDM0       = 0x1326 , 
    LDN0       = 0x1327 , 
    LDO0       = 0x1328 , 
    LDP0       = 0x1329 , 
    LDQ0       = 0x132A , 
    LDR0       = 0x132B , 
    LDS0       = 0x132C , 
    LDT0       = 0x132D , 
    LDU0       = 0x132E , 
    LDV0       = 0x132F , 
    LDW0       = 0x1330 , 
    LDX0       = 0x1331 , 
    LDY0       = 0x1332 , 
    LDZ0       = 0x1333 ,

    LDPC       = 0x1334 , 
    LDTID      = 0x1335 ,

    RCA        = 0x16C8 , 
    RCB        = 0x16C9 , 
    RCC        = 0x16CA , 
    RCD        = 0x16CB , 
    RCE        = 0x16CC , 
    RCF        = 0x16CD , 
    RCG        = 0x16CE , 
    RCH        = 0x16CF , 
    RCI        = 0x16D0 , 
    RCJ        = 0x16D1 , 
    RCK        = 0x16D2 , 
    RCL        = 0x16D3 , 
    RCM        = 0x16D4 , 
    RCN        = 0x16D5 , 
    RCO        = 0x16D6 , 
    RCP        = 0x16D7 , 
    RCQ        = 0x16D8 , 
    RCR        = 0x16D9 , 
    RCS        = 0x16DA , 
    RCT        = 0x16DB , 
    RCU        = 0x16DC , 
    RCV        = 0x16DD , 
    RCW        = 0x16DE , 
    RCX        = 0x16DF , 
    RCY        = 0x16E0 , 
    RCZ        = 0x16E1 , 
    RCDX       = 0x16E2 , 
    RCDY       = 0x16E3 , 
    RCDZ       = 0x16E4 , 
    RCDT       = 0x16E5
}

impl BarracudaOperators {

    /// Converts opcode value into Operation enums.
    /// @opcode: Barracuda op code value.
    /// @returns Some(BarracudaOperator) representing opcode value, None otherwise
    pub(crate) fn from(opcode: u32) -> Option<Self> {
        FromPrimitive::from_u32(opcode)
    }

    pub(crate) fn as_u32(&self) -> u32 {
        // Safe to unwrap here as enum should always map to an integer.
        self.to_u32().unwrap()
    }
}
