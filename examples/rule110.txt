# mem = malloc(208) + 4;
208
MALLOC
4
ADD_PTR

# *(mem+192)=1
DUP
192
ADD_PTR
1
WRITE

# Start Simulation iteration loop to run 48 times
0
48
LOOP_ENTRY

# Duplicate mem address Stack looks like [&mem, &mem]
DUP

# Iterate all 50 values in buffer if the value is non-zero print the character '*' otherwise ' '
0
50
LOOP_ENTRY
# Increment pointer by 4 and read value *(ptr+=4)
4
ADD_PTR
DUP
READ

# Print '*' if value>0 else ' '
42
32
TERNARY
PRINTC
LOOP_END

# Drops value pointer used before
DROP

# Print New line
10
PRINTC


# Push mem[0]*2 = mem[0] << 1
DUP
READ
1
LSHIFT

#  mem[1] | mem[0]*2
OVER
4
ADD_PTR
READ
OR

# value_ptr=mem[1] 
OVER
4
ADD_PTR

# stack should look like [&mem, (mem[1] | mem[0]<<1), value_ptr)]

# Run loop 48 times
1
49
LOOP_ENTRY
# value_ptr += 4
4
ADD_PTR

# Stack should look like [&mem, value_ptr, (mem[1] | mem[0] << 1)]
SWAP

# Stack should look like [&mem, value_ptr, (mem[1] | mem[0] << 1) << 1]
1
LSHIFT

# 7 & ((mem[1] | mem[0] << 1) << 1)
7
AND

# (7 & ((mem[1] | mem[0] << 1) << 1)) | mem[0]
OVER
READ
OR

# &mem[-1]
OVER
4
SUB_PTR

# (110 >> &mem[0]) & 1
OVER
110
SWAP
RSHIFT
1
AND

# mem[-1] = (110 << &mem[0]) & 1
WRITE
SWAP
LOOP_END

# Drop remaining values so stack looks like [mem]
DROP
DROP
LOOP_END